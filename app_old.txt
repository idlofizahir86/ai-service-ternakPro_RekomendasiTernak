from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import joblib
import pandas as pd
import numpy as np
from typing import List, Dict

app = FastAPI(title="TernakPro Rekomendasi Ternak AI Service")

# Enable CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Load model dan preprocessing tools
class LivestockModel:
    def __init__(self):
        self.model = None
        self.scaler = None
        self.encoders = {}
        self.animal_info = {}
        
    def load_model(self, model_path):
        """Load model yang sudah ditraining"""
        try:
            model_data = joblib.load(model_path)
            self.model = model_data['model']
            self.scaler = model_data['scaler']
            self.encoders = model_data['encoders']
            self.animal_info = model_data['animal_info']
            print("Model loaded successfully!")
        except Exception as e:
            print(f"Error loading model: {e}")
            raise
    
    def predict(self, input_data: Dict) -> Dict:
        """Membuat prediksi berdasarkan input"""
        try:
            # Preprocess input
            processed_input = self._preprocess_input(input_data)
            
            # Scale features
            scaled_input = self.scaler.transform([processed_input])
            
            # Predict
            prediction = self.model.predict(scaled_input)[0]
            success_rate, roi, market_demand = prediction
            
            # Get recommended animal
            recommended_animal = self._get_recommended_animal(input_data)
            
            # Get animal details
            animal_details = self.animal_info.get(recommended_animal, {})
            
            return {
                'recommended_animal': recommended_animal,
                'success_rate': float(success_rate),
                'roi': float(roi),
                'market_demand': float(market_demand),
                'animal_details': animal_details
            }
            
        except Exception as e:
            print(f"Prediction error: {e}")
            raise
    
    def _preprocess_input(self, input_data: Dict) -> List:
        """Preprocess input data"""
        processed = []
        
        # Encode categorical features
        categorical_cols = ['region', 'goal', 'available_feed', 'time_availability', 'experience']
        
        for col in categorical_cols:
            if col in input_data:
                le = self.encoders.get(col)
                if le:
                    try:
                        encoded = le.transform([input_data[col]])[0]
                    except ValueError:
                        encoded = 0  # Default value jika tidak ditemukan
                    processed.append(encoded)
                else:
                    processed.append(0)
        
        # Add numerical features
        processed.append(input_data.get('land_size', 0))
        
        return processed
    
    def _get_recommended_animal(self, input_data: Dict) -> str:
        """Logic untuk rekomendasi ternak"""
        # Ini bisa diganti dengan model yang lebih canggih
        goal = input_data.get('goal', '')
        land_size = input_data.get('land_size', 0)
        
        if goal == 'daging':
            if land_size < 100:
                return 'ayam_pedaging'
            elif land_size < 200:
                return 'kambing'
            else:
                return 'sapi_potong'
        elif goal == 'telur':
            return 'ayam_petelur'
        elif goal == 'susu':
            return 'sapi_perah'
        else:
            return 'ayam_pedaging'

# Initialize model
livestock_model = LivestockModel()

class RecommendationRequest(BaseModel):
    region: str
    land_size: float
    goal: str
    available_feed: str
    time_availability: str
    experience: str

@app.on_event("startup")
async def startup_event():
    """Load model ketika aplikasi start"""
    try:
        livestock_model.load_model('rekomendasi_ternak_ternakpro_v1_model.pkl')
    except Exception as e:
        print(f"Failed to load model: {e}")

@app.post("/recommend")
async def recommend_livestock(request: RecommendationRequest):
    """Endpoint untuk rekomendasi ternak"""
    try:
        input_data = {
            'region': request.region,
            'land_size': request.land_size,
            'goal': request.goal,
            'available_feed': request.available_feed,
            'time_availability': request.time_availability,
            'experience': request.experience
        }
        
        prediction = livestock_model.predict(input_data)
        return prediction
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "model_loaded": livestock_model.model is not None}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=5000)